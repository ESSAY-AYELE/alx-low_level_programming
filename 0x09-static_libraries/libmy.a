!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _isupper - check if a given int is uppercase or not
 * @c: the int to be checked
 * Return: 1 if c is uppercase else 0
 */
int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     341       `
#include "main.h"
/**
 * _memset - fill a memory s staring from p up to p + n
 * @p: stratring point of the memomory address
 * @s: the value to fill it with
 * @n: number to memory space to be filled
 * Return: p
 */
char *_memset(char *p, char s, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(p + i) = s;
	return (p);
}

1-isdigit.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _isdigit - check if a given int is uppercase or not
 * @c: the int to be checked
 * Return: 1 if c is uppercase else 0
 */
int _isdigit(int c)
{
	if ((c >= '0') && (c <= '9'))
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     328       `
#include "main.h"
/**
 * _memcpy - copy src to dest
 * @dest: destination memory addres
 * @src: source address
 * @n: number of memory location to be copied
 * Return: dest address
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     437       `
#include "main.h"
/**
 * _strncat - concatenate the strings
 * @src: source
 * @dest: destination
 * @n: the number of character to append
 * Return: pointer to the string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	j = 0;
	i = 0;
	while (dest[i] != '\0')
	{
		dest[j] = dest[i];
		i++;
		j++;
	}
	i = 0;
	while ((src[i] != '\0') && (i < n))
	{
		dest[j] = src[i];
		j++;
		i++;
	}
	dest[j] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     285       `
#include "main.h"
/**
 * _strchr - find a char in a string and return string starting from c
 * @s: the string pointer
 * @c: the character to be found
 * Return: str
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     237       `
#include "main.h"
/**
 * _strlen - compute the length of the string
 * @s: the pointer to the stirng
 * Return: the length
 */
int _strlen(char *s)
{	int i;
	char tmp;

	for (i = 0; tmp != '\0'; i++)
		tmp = *(s + i);
	return (i - 1);
}

2-strncpy.c/    0           0     0     644     398       `
#include "main.h"
/**
 * _strncpy - used to copy a specified number of characters
 * @dest: destination pointer
 * @src: source pointer
 * @n: the number of character to be copied
 * Return: dest pointer
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     236       `
#include "main.h"
/**
 * _islower - check if a char is lower case or not
 * @c: the character be checked
 * Return: 1 if is lowercase 0 if not
 */
int _islower(int c)
{
	if ((c >= 'a') && (c <= 'z'))
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     190       `
#include "main.h"
/**
 * _puts - prints stiring
 * @str: string pointer
 */
void _puts(char *str)
{
	int i;

	for (i = 0; *(str + i) != '\0'; i++)
		_putchar(*(str + i));
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     486       `
#include "main.h"
/**
 * _strcmp - compares the length of 2 string
 * @s1: the first string pointer
 * @s2: the second string pointer
 * Return: +ve int if s2 < s1 else -ve int 0, if they are equal
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while ((s1[i] != '\0') && (s2[i] != '\0'))
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}
	if ((s1[i] == '\0') && (s2[i] != '\0'))
		return (-1);
	else if ((s1[i] != '\0') && (s2[i] == '\0'))
		return (1);
	return (0);
}
3-strspn.c/     0           0     0     644     519       `
#include "main.h"
/**
 * _strspn - search the first character that is not in accept
 * @s: the string to be searched
 * @accept: the set of character to be found
 * Return: the index of the first character that is not in accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int len, found;
	char *pnt;

	len = 0;
	while (*s)
	{
		found = 0;
		pnt = accept;
		while (*pnt)
		{
			if (*pnt == *s)
			{
				found = 1;
				break;
			}
			pnt++;
		}
		if (!found)
			break;
		s++;
		len++;
	}
	return (len);
}

4-isalpha.c/    0           0     0     644     268       `
#include "main.h"
/**
 * _isalpha - check if a char is lower case or not
 * @c: the character be checked
 * Return: 1 if is lowercase 0 if not
 */
int _isalpha(int c)
{
	if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     485       `
#include "main.h"
/**
 * _strpbrk - finds the first character in the string str1
 * that matches any character specified in str2
 * @s: This is the C string to be scanned
 * @accept: This is the C string containing the characters to match
 * Return: substring of s staring from the first apperance of character
 */
char *_strpbrk(char *s, char *accept)
{
	char *p;

	while (*s)
	{
		p = accept;
		while (*p)
		{
			if (*p == *s)
				return (s);
			p++;
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     565       `
#include "main.h"
/**
 * _strstr - search for string in a sting
 * @haystack: the string to searched
 * @needle: the string to be sound
 * Return: heystack begining from the first apperance of needlee
 */
char *_strstr(char *haystack, char *needle)
{
	char *p = haystack;
	int flag = 0;

	while (*p)
	{
		while ((*p == *needle) && (*p != '\0') && (*needle != '\0'))
		{
			p++;
			needle++;
			flag = 1;
		}
		if (flag && *needle == '\0')
		{
			return (haystack);
		}
		else if (flag && *needle != '\0')
			return ('\0');
		haystack++;
		p++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     219       `
#include "main.h"
/**
 * _abs - computes the absoute value of number
 * @n: the number to be computed
 * Return: the absoulte value of a number
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);
	else
		return (n);
}

9-strcpy.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _strcpy - copy a string
 * @dest: destinition string
 * @src: source of the stirng
 * Return: the pointer to the destintion string
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = src[i];
	return (dest);
}

_putchar.c/     0           0     0     644     264       `
#include <unistd.h>
#include "main.h"
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
main.h/         0           0     0     644     687       `
#ifndef HEADER
#define HEADER
int _putchar(char c);
int _islower(int c);
int _isalpha(int c);
int _abs(int n);
int _isupper(int c);
int _isdigit(int c);
int _strlen(char *s);
void _puts(char *s);
char *_strcpy(char *dest, char *src);
int _atoi(char *s);
char *_strcat(char *dest, char *src);
char *_strncat(char *dest, char *src, int n);
char *_strncpy(char *dest, char *src, int n);
int _strcmp(char *s1, char *s2);
char *_memset(char *s, char b, unsigned int n);
char *_memcpy(char *dest, char *src, unsigned int n);
char *_strchr(char *s, char c);
unsigned int _strspn(char *s, char *accept);
char *_strpbrk(char *s, char *accept);
char *_strstr(char *haystack, char *needle);
#endif

